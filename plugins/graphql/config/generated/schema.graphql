type Address {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  street: String
  suite: String
  city: String
  zipcode: String
  user: UsersPermissionsUser
}

type AddressAggregator {
  count: Int
}

type AddressConnection {
  values: [Address]
  groupBy: AddressGroupBy
  aggregate: AddressAggregator
}

type AddressConnection_id {
  key: ID
  connection: AddressConnection
}

type AddressConnectionCity {
  key: String
  connection: AddressConnection
}

type AddressConnectionCreatedAt {
  key: DateTime
  connection: AddressConnection
}

type AddressConnectionStreet {
  key: String
  connection: AddressConnection
}

type AddressConnectionSuite {
  key: String
  connection: AddressConnection
}

type AddressConnectionUpdatedAt {
  key: DateTime
  connection: AddressConnection
}

type AddressConnectionUser {
  key: ID
  connection: AddressConnection
}

type AddressConnectionZipcode {
  key: String
  connection: AddressConnection
}

type AddressGroupBy {
  _id: [AddressConnection_id]
  createdAt: [AddressConnectionCreatedAt]
  updatedAt: [AddressConnectionUpdatedAt]
  street: [AddressConnectionStreet]
  suite: [AddressConnectionSuite]
  city: [AddressConnectionCity]
  zipcode: [AddressConnectionZipcode]
  user: [AddressConnectionUser]
}

input AddressInput {
  street: String
  suite: String
  city: String
  zipcode: String
  user: ID
}

type Category {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  price: Float
  image: UploadFile
  isPublished: Boolean
  mobiles(sort: String, limit: Int, start: Int, where: JSON): [Mobile]
}

type CategoryAggregator {
  count: Int
  sum: CategoryAggregatorSum
  avg: CategoryAggregatorAvg
  min: CategoryAggregatorMin
  max: CategoryAggregatorMax
}

type CategoryAggregatorAvg {
  price: Float
}

type CategoryAggregatorMax {
  price: Float
}

type CategoryAggregatorMin {
  price: Float
}

type CategoryAggregatorSum {
  price: Float
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryConnection_id {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreatedAt {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionDescription {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionImage {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionIsPublished {
  key: Boolean
  connection: CategoryConnection
}

type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionPrice {
  key: Float
  connection: CategoryConnection
}

type CategoryConnectionUpdatedAt {
  key: DateTime
  connection: CategoryConnection
}

type CategoryGroupBy {
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  updatedAt: [CategoryConnectionUpdatedAt]
  name: [CategoryConnectionName]
  description: [CategoryConnectionDescription]
  price: [CategoryConnectionPrice]
  image: [CategoryConnectionImage]
  isPublished: [CategoryConnectionIsPublished]
}

input CategoryInput {
  name: String
  description: String
  price: Float
  image: ID
  isPublished: Boolean
  mobiles: [ID]
}

type Company {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  catchPhrase: String
  bs: String
  user: UsersPermissionsUser
}

type CompanyAggregator {
  count: Int
}

type CompanyConnection {
  values: [Company]
  groupBy: CompanyGroupBy
  aggregate: CompanyAggregator
}

type CompanyConnection_id {
  key: ID
  connection: CompanyConnection
}

type CompanyConnectionBs {
  key: String
  connection: CompanyConnection
}

type CompanyConnectionCatchPhrase {
  key: String
  connection: CompanyConnection
}

type CompanyConnectionCreatedAt {
  key: DateTime
  connection: CompanyConnection
}

type CompanyConnectionName {
  key: String
  connection: CompanyConnection
}

type CompanyConnectionUpdatedAt {
  key: DateTime
  connection: CompanyConnection
}

type CompanyConnectionUser {
  key: ID
  connection: CompanyConnection
}

type CompanyGroupBy {
  _id: [CompanyConnection_id]
  createdAt: [CompanyConnectionCreatedAt]
  updatedAt: [CompanyConnectionUpdatedAt]
  name: [CompanyConnectionName]
  catchPhrase: [CompanyConnectionCatchPhrase]
  bs: [CompanyConnectionBs]
  user: [CompanyConnectionUser]
}

input CompanyInput {
  name: String
  catchPhrase: String
  bs: String
  user: ID
}

input createAddressInput {
  data: AddressInput
}

type createAddressPayload {
  address: Address
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createCompanyInput {
  data: CompanyInput
}

type createCompanyPayload {
  company: Company
}

input createMobileInput {
  data: MobileInput
}

type createMobilePayload {
  mobile: Mobile
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteAddressInput {
  where: InputID
}

type deleteAddressPayload {
  address: Address
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteCompanyInput {
  where: InputID
}

type deleteCompanyPayload {
  company: Company
}

input deleteMobileInput {
  where: InputID
}

type deleteMobilePayload {
  mobile: Mobile
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mobile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  price: Float
  model: String
  image: UploadFile
  category: Category
}

type MobileAggregator {
  count: Int
  sum: MobileAggregatorSum
  avg: MobileAggregatorAvg
  min: MobileAggregatorMin
  max: MobileAggregatorMax
}

type MobileAggregatorAvg {
  price: Float
}

type MobileAggregatorMax {
  price: Float
}

type MobileAggregatorMin {
  price: Float
}

type MobileAggregatorSum {
  price: Float
}

type MobileConnection {
  values: [Mobile]
  groupBy: MobileGroupBy
  aggregate: MobileAggregator
}

type MobileConnection_id {
  key: ID
  connection: MobileConnection
}

type MobileConnectionCategory {
  key: ID
  connection: MobileConnection
}

type MobileConnectionCreatedAt {
  key: DateTime
  connection: MobileConnection
}

type MobileConnectionImage {
  key: ID
  connection: MobileConnection
}

type MobileConnectionModel {
  key: String
  connection: MobileConnection
}

type MobileConnectionName {
  key: String
  connection: MobileConnection
}

type MobileConnectionPrice {
  key: Float
  connection: MobileConnection
}

type MobileConnectionUpdatedAt {
  key: DateTime
  connection: MobileConnection
}

type MobileGroupBy {
  _id: [MobileConnection_id]
  createdAt: [MobileConnectionCreatedAt]
  updatedAt: [MobileConnectionUpdatedAt]
  name: [MobileConnectionName]
  price: [MobileConnectionPrice]
  model: [MobileConnectionModel]
  image: [MobileConnectionImage]
  category: [MobileConnectionCategory]
}

input MobileInput {
  name: String
  price: Float
  model: String
  image: ID
  category: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Address | createAddressPayload | updateAddressPayload | deleteAddressPayload | AddressConnection | AddressAggregator | AddressGroupBy | AddressConnection_id | AddressConnectionCreatedAt | AddressConnectionUpdatedAt | AddressConnectionStreet | AddressConnectionSuite | AddressConnectionCity | AddressConnectionZipcode | AddressConnectionUser | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | CategoryConnection | CategoryAggregator | CategoryAggregatorSum | CategoryAggregatorAvg | CategoryAggregatorMin | CategoryAggregatorMax | CategoryGroupBy | CategoryConnection_id | CategoryConnectionCreatedAt | CategoryConnectionUpdatedAt | CategoryConnectionName | CategoryConnectionDescription | CategoryConnectionPrice | CategoryConnectionImage | CategoryConnectionIsPublished | Company | createCompanyPayload | updateCompanyPayload | deleteCompanyPayload | CompanyConnection | CompanyAggregator | CompanyGroupBy | CompanyConnection_id | CompanyConnectionCreatedAt | CompanyConnectionUpdatedAt | CompanyConnectionName | CompanyConnectionCatchPhrase | CompanyConnectionBs | CompanyConnectionUser | Mobile | createMobilePayload | updateMobilePayload | deleteMobilePayload | MobileConnection | MobileAggregator | MobileAggregatorSum | MobileAggregatorAvg | MobileAggregatorMin | MobileAggregatorMax | MobileGroupBy | MobileConnection_id | MobileConnectionCreatedAt | MobileConnectionUpdatedAt | MobileConnectionName | MobileConnectionPrice | MobileConnectionModel | MobileConnectionImage | MobileConnectionCategory | Post | createPostPayload | updatePostPayload | deletePostPayload | PostConnection | PostAggregator | PostGroupBy | PostConnection_id | PostConnectionCreatedAt | PostConnectionUpdatedAt | PostConnectionTitle | PostConnectionDescription | PostConnectionUser | PostConnectionImage | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionAddress | UsersPermissionsUserConnectionCompany

type Mutation {
  createAddress(input: createAddressInput): createAddressPayload
  updateAddress(input: updateAddressInput): updateAddressPayload
  deleteAddress(input: deleteAddressInput): deleteAddressPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createCompany(input: createCompanyInput): createCompanyPayload
  updateCompany(input: updateCompanyInput): updateCompanyPayload
  deleteCompany(input: deleteCompanyInput): deleteCompanyPayload
  createMobile(input: createMobileInput): createMobilePayload
  updateMobile(input: updateMobileInput): updateMobilePayload
  deleteMobile(input: deleteMobileInput): deleteMobilePayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Post {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  user: UsersPermissionsUser
  image: UploadFile
}

type PostAggregator {
  count: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnection_id {
  key: ID
  connection: PostConnection
}

type PostConnectionCreatedAt {
  key: DateTime
  connection: PostConnection
}

type PostConnectionDescription {
  key: String
  connection: PostConnection
}

type PostConnectionImage {
  key: ID
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionUpdatedAt {
  key: DateTime
  connection: PostConnection
}

type PostConnectionUser {
  key: ID
  connection: PostConnection
}

type PostGroupBy {
  _id: [PostConnection_id]
  createdAt: [PostConnectionCreatedAt]
  updatedAt: [PostConnectionUpdatedAt]
  title: [PostConnectionTitle]
  description: [PostConnectionDescription]
  user: [PostConnectionUser]
  image: [PostConnectionImage]
}

input PostInput {
  title: String
  description: String
  user: ID
  image: ID
}

type Query {
  address(id: ID!): Address
  addresses(sort: String, limit: Int, start: Int, where: JSON): [Address]
  addressesConnection(sort: String, limit: Int, start: Int, where: JSON): AddressConnection
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  company(id: ID!): Company
  companies(sort: String, limit: Int, start: Int, where: JSON): [Company]
  companiesConnection(sort: String, limit: Int, start: Int, where: JSON): CompanyConnection
  mobile(id: ID!): Mobile
  mobiles(sort: String, limit: Int, start: Int, where: JSON): [Mobile]
  mobilesConnection(sort: String, limit: Int, start: Int, where: JSON): MobileConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateAddressInput {
  where: InputID
  data: AddressInput
}

type updateAddressPayload {
  address: Address
}

input updateCategoryInput {
  where: InputID
  data: CategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updateCompanyInput {
  where: InputID
  data: CompanyInput
}

type updateCompanyPayload {
  company: Company
}

input updateMobileInput {
  where: InputID
  data: MobileInput
}

type updateMobilePayload {
  mobile: Mobile
}

input updatePostInput {
  where: InputID
  data: PostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  address: ID
  company: ID
  posts: [ID]
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  address: Address
  company: Company
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionAddress {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCompany {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  address: [UsersPermissionsUserConnectionAddress]
  company: [UsersPermissionsUserConnectionCompany]
}
